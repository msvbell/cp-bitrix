<?php
 namespace Monolog\Handler; use Monolog\Formatter\NormalizerFormatter; use Monolog\Logger; class ZendMonitorHandler extends AbstractProcessingHandler { protected $levelMap = array(); public function __construct($level = Logger::DEBUG, $bubble = true) { if (!function_exists('zend_monitor_custom_event')) { throw new MissingExtensionException( 'You must have Zend Server installed with Zend Monitor enabled in order to use this handler' ); } $this->levelMap = array( Logger::DEBUG => \ZEND_MONITOR_EVENT_SEVERITY_INFO, Logger::INFO => \ZEND_MONITOR_EVENT_SEVERITY_INFO, Logger::NOTICE => \ZEND_MONITOR_EVENT_SEVERITY_INFO, Logger::WARNING => \ZEND_MONITOR_EVENT_SEVERITY_WARNING, Logger::ERROR => \ZEND_MONITOR_EVENT_SEVERITY_ERROR, Logger::CRITICAL => \ZEND_MONITOR_EVENT_SEVERITY_ERROR, Logger::ALERT => \ZEND_MONITOR_EVENT_SEVERITY_ERROR, Logger::EMERGENCY => \ZEND_MONITOR_EVENT_SEVERITY_ERROR, ); parent::__construct($level, $bubble); } protected function write(array $record) { $this->writeZendMonitorCustomEvent( Logger::getLevelName($record['level']), $record['message'], $record['formatted'], $this->levelMap[$record['level']] ); } protected function writeZendMonitorCustomEvent($type, $message, $formatted, $severity) { zend_monitor_custom_event($type, $message, $formatted, $severity); } public function getDefaultFormatter() { return new NormalizerFormatter(); } public function getLevelMap() { return $this->levelMap; } } 