<?php
 namespace Respect\Validation\Rules; use Respect\Validation\Exceptions\ComponentException; use SplFileInfo; class Size extends AbstractRule { public $minSize; public $minValue; public $maxSize; public $maxValue; public function __construct($minSize = null, $maxSize = null) { $this->minSize = $minSize; $this->minValue = $minSize ? $this->toBytes($minSize) : null; $this->maxSize = $maxSize; $this->maxValue = $maxSize ? $this->toBytes($maxSize) : null; } private function toBytes($size) { $value = $size; $units = ['b', 'kb', 'mb', 'gb', 'tb', 'pb', 'eb', 'zb', 'yb']; foreach ($units as $exponent => $unit) { if (!preg_match("/^(\d+(.\d+)?){$unit}$/i", $size, $matches)) { continue; } $value = $matches[1] * pow(1024, $exponent); break; } if (!is_numeric($value)) { throw new ComponentException(sprintf('"%s" is not a recognized file size.', $size)); } return $value; } private function isValidSize($size) { if (null !== $this->minValue && null !== $this->maxValue) { return ($size >= $this->minValue && $size <= $this->maxValue); } if (null !== $this->minValue) { return ($size >= $this->minValue); } return ($size <= $this->maxValue); } public function validate($input) { if ($input instanceof SplFileInfo) { return $this->isValidSize($input->getSize()); } if (is_string($input)) { return $this->isValidSize(filesize($input)); } return false; } } 