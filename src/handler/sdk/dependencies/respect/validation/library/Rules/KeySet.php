<?php
 namespace Respect\Validation\Rules; use Respect\Validation\Exceptions\ComponentException; use Respect\Validation\Exceptions\KeySetException; use Respect\Validation\Validatable; class KeySet extends AllOf { private function filterAllOf(AllOf $rule) { $rules = $rule->getRules(); if (count($rules) != 1) { throw new ComponentException('AllOf rule must have only one Key rule'); } return current($rules); } public function addRule($rule, $arguments = []) { if ($rule instanceof AllOf) { $rule = $this->filterAllOf($rule); } if (!$rule instanceof Key) { throw new ComponentException('KeySet rule accepts only Key rules'); } $this->appendRule($rule); return $this; } public function addRules(array $rules) { foreach ($rules as $rule) { $this->addRule($rule); } return $this; } public function getKeys() { $keys = []; foreach ($this->getRules() as $keyRule) { $keys[] = $keyRule->reference; } return $keys; } private function hasValidStructure($input) { if (!is_array($input)) { return false; } foreach ($this->getRules() as $keyRule) { if (!array_key_exists($keyRule->reference, $input) && $keyRule->mandatory) { return false; } unset($input[$keyRule->reference]); } return (count($input) == 0); } private function checkKeys($input) { if (!$this->hasValidStructure($input)) { $params = ['keys' => $this->getKeys()]; $exception = $this->reportError($input, $params); throw $exception; } } public function assert($input) { $this->checkKeys($input); return parent::assert($input); } public function check($input) { $this->checkKeys($input); return parent::check($input); } public function validate($input) { if (!$this->hasValidStructure($input)) { return false; } return parent::validate($input); } } 