<?php
 namespace Respect\Validation\Rules; use Respect\Validation\Exceptions\ComponentException; use Respect\Validation\Exceptions\ValidationException; class Factor extends AbstractRule { public $dividend; public function __construct($dividend) { if (!is_numeric($dividend) || (int) $dividend != $dividend) { $message = 'Dividend %s must be an integer'; throw new ComponentException(sprintf($message, ValidationException::stringify($dividend))); } $this->dividend = (int) $dividend; } public function validate($input) { if ($this->dividend === 0) { return true; } if (!is_numeric($input) || (int) $input != $input || $input == 0) { return false; } $input = (int) abs($input); $dividend = (int) abs($this->dividend); return is_integer($dividend / $input); } } 