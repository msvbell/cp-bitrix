<?php
namespace GuzzleHttp; use GuzzleHttp\Ring\Client\CurlHandler; use GuzzleHttp\Ring\Client\CurlMultiHandler; use GuzzleHttp\Ring\Client\StreamHandler; use GuzzleHttp\Ring\Client\Middleware; final class Utils { public static function getPath($data, $path) { $path = explode('/', $path); while (null !== ($part = array_shift($path))) { if (!is_array($data) || !isset($data[$part])) { return null; } $data = $data[$part]; } return $data; } public static function setPath(&$data, $path, $value) { $queue = explode('/', $path); if (count($queue) === 1) { $data[$path] = $value; return; } $current =& $data; while (null !== ($key = array_shift($queue))) { if (!is_array($current)) { throw new \RuntimeException("Trying to setPath {$path}, but " . "{$key} is set and is not an array"); } elseif (!$queue) { if ($key == '[]') { $current[] = $value; } else { $current[$key] = $value; } } elseif (isset($current[$key])) { $current =& $current[$key]; } else { $current[$key] = []; $current =& $current[$key]; } } } public static function uriTemplate($template, array $variables) { if (function_exists('\\uri_template')) { return \uri_template($template, $variables); } static $uriTemplate; if (!$uriTemplate) { $uriTemplate = new UriTemplate(); } return $uriTemplate->expand($template, $variables); } public static function jsonDecode($json, $assoc = false, $depth = 512, $options = 0) { if ($json === '' || $json === null) { return null; } static $jsonErrors = [ JSON_ERROR_DEPTH => 'JSON_ERROR_DEPTH - Maximum stack depth exceeded', JSON_ERROR_STATE_MISMATCH => 'JSON_ERROR_STATE_MISMATCH - Underflow or the modes mismatch', JSON_ERROR_CTRL_CHAR => 'JSON_ERROR_CTRL_CHAR - Unexpected control character found', JSON_ERROR_SYNTAX => 'JSON_ERROR_SYNTAX - Syntax error, malformed JSON', JSON_ERROR_UTF8 => 'JSON_ERROR_UTF8 - Malformed UTF-8 characters, possibly incorrectly encoded' ]; $data = \json_decode($json, $assoc, $depth, $options); if (JSON_ERROR_NONE !== json_last_error()) { $last = json_last_error(); throw new \InvalidArgumentException( 'Unable to parse JSON data: ' . (isset($jsonErrors[$last]) ? $jsonErrors[$last] : 'Unknown error') ); } return $data; } public static function getDefaultUserAgent() { static $defaultAgent = ''; if (!$defaultAgent) { $defaultAgent = 'Guzzle/' . ClientInterface::VERSION; if (extension_loaded('curl')) { $defaultAgent .= ' curl/' . curl_version()['version']; } $defaultAgent .= ' PHP/' . PHP_VERSION; } return $defaultAgent; } public static function getDefaultHandler() { $default = $future = null; if (extension_loaded('curl')) { $config = [ 'select_timeout' => getenv('GUZZLE_CURL_SELECT_TIMEOUT') ?: 1 ]; if ($maxHandles = getenv('GUZZLE_CURL_MAX_HANDLES')) { $config['max_handles'] = $maxHandles; } if (function_exists('curl_reset')) { $default = new CurlHandler(); $future = new CurlMultiHandler($config); } else { $default = new CurlMultiHandler($config); } } if (ini_get('allow_url_fopen')) { $default = !$default ? new StreamHandler() : Middleware::wrapStreaming($default, new StreamHandler()); } elseif (!$default) { throw new \RuntimeException('Guzzle requires cURL, the ' . 'allow_url_fopen ini setting, or a custom HTTP handler.'); } return $future ? Middleware::wrapFuture($default, $future) : $default; } } 