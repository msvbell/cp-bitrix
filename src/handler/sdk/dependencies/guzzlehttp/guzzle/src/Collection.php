<?php
namespace GuzzleHttp; class Collection implements \ArrayAccess, \IteratorAggregate, \Countable, ToArrayInterface { use HasDataTrait; public function __construct(array $data = []) { $this->data = $data; } public static function fromConfig( array $config = [], array $defaults = [], array $required = [] ) { $data = $config + $defaults; if ($missing = array_diff($required, array_keys($data))) { throw new \InvalidArgumentException( 'Config is missing the following keys: ' . implode(', ', $missing)); } return new self($data); } public function clear() { $this->data = []; } public function get($key) { return isset($this->data[$key]) ? $this->data[$key] : null; } public function set($key, $value) { $this->data[$key] = $value; } public function add($key, $value) { if (!array_key_exists($key, $this->data)) { $this->data[$key] = $value; } elseif (is_array($this->data[$key])) { $this->data[$key][] = $value; } else { $this->data[$key] = array($this->data[$key], $value); } } public function remove($key) { unset($this->data[$key]); } public function getKeys() { return array_keys($this->data); } public function hasKey($key) { return array_key_exists($key, $this->data); } public function hasValue($value) { return array_search($value, $this->data, true); } public function replace(array $data) { $this->data = $data; } public function merge($data) { foreach ($data as $key => $value) { $this->add($key, $value); } } public function overwriteWith($data) { if (is_array($data)) { $this->data = $data + $this->data; } elseif ($data instanceof Collection) { $this->data = $data->toArray() + $this->data; } else { foreach ($data as $key => $value) { $this->data[$key] = $value; } } } public function map(callable $closure, array $context = []) { $collection = new static(); foreach ($this as $key => $value) { $collection[$key] = $closure($key, $value, $context); } return $collection; } public function filter(callable $closure) { $collection = new static(); foreach ($this->data as $key => $value) { if ($closure($key, $value)) { $collection[$key] = $value; } } return $collection; } } 