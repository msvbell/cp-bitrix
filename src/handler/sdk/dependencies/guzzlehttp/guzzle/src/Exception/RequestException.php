<?php
namespace GuzzleHttp\Exception; use GuzzleHttp\Message\RequestInterface; use GuzzleHttp\Message\ResponseInterface; use GuzzleHttp\Ring\Exception\ConnectException; use GuzzleHttp\Exception\ConnectException as HttpConnectException; use GuzzleHttp\Ring\Future\FutureInterface; class RequestException extends TransferException { private $request; private $response; public function __construct( $message, RequestInterface $request, ResponseInterface $response = null, \Exception $previous = null ) { $code = $response && !($response instanceof FutureInterface) ? $response->getStatusCode() : 0; parent::__construct($message, $code, $previous); $this->request = $request; $this->response = $response; } public static function wrapException(RequestInterface $request, \Exception $e) { if ($e instanceof RequestException) { return $e; } elseif ($e instanceof ConnectException) { return new HttpConnectException($e->getMessage(), $request, null, $e); } else { return new RequestException($e->getMessage(), $request, null, $e); } } public static function create( RequestInterface $request, ResponseInterface $response = null, \Exception $previous = null ) { if (!$response) { return new self('Error completing request', $request, null, $previous); } $level = floor($response->getStatusCode() / 100); if ($level == '4') { $label = 'Client error response'; $className = __NAMESPACE__ . '\\ClientException'; } elseif ($level == '5') { $label = 'Server error response'; $className = __NAMESPACE__ . '\\ServerException'; } else { $label = 'Unsuccessful response'; $className = __CLASS__; } $message = $label . ' [url] ' . $request->getUrl() . ' [status code] ' . $response->getStatusCode() . ' [reason phrase] ' . $response->getReasonPhrase(); return new $className($message, $request, $response, $previous); } public function getRequest() { return $this->request; } public function getResponse() { return $this->response; } public function hasResponse() { return $this->response !== null; } } 