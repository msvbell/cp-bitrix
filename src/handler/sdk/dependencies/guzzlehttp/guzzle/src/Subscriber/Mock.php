<?php
namespace GuzzleHttp\Subscriber; use GuzzleHttp\Event\RequestEvents; use GuzzleHttp\Event\SubscriberInterface; use GuzzleHttp\Event\BeforeEvent; use GuzzleHttp\Exception\RequestException; use GuzzleHttp\Message\MessageFactory; use GuzzleHttp\Message\ResponseInterface; use GuzzleHttp\Stream\StreamInterface; class Mock implements SubscriberInterface, \Countable { private $queue = []; private $readBodies; private $factory; public function __construct(array $items = [], $readBodies = true) { $this->factory = new MessageFactory(); $this->readBodies = $readBodies; $this->addMultiple($items); } public function getEvents() { return ['before' => ['onBefore', RequestEvents::SIGN_REQUEST - 10]]; } public function onBefore(BeforeEvent $event) { if (!$item = array_shift($this->queue)) { throw new \OutOfBoundsException('Mock queue is empty'); } elseif ($item instanceof RequestException) { throw $item; } $request = $event->getRequest(); if ($this->readBodies && $request->getBody()) { while (!$request->getBody()->eof()) { $request->getBody()->read(8096); } } $saveTo = $event->getRequest()->getConfig()->get('save_to'); if (null !== $saveTo) { $body = $item->getBody(); if (is_resource($saveTo)) { fwrite($saveTo, $body); } elseif (is_string($saveTo)) { file_put_contents($saveTo, $body); } elseif ($saveTo instanceof StreamInterface) { $saveTo->write($body); } } $event->intercept($item); } public function count() { return count($this->queue); } public function addResponse($response) { if (is_string($response)) { $response = file_exists($response) ? $this->factory->fromMessage(file_get_contents($response)) : $this->factory->fromMessage($response); } elseif (!($response instanceof ResponseInterface)) { throw new \InvalidArgumentException('Response must a message ' . 'string, response object, or path to a file'); } $this->queue[] = $response; return $this; } public function addException(RequestException $e) { $this->queue[] = $e; return $this; } public function addMultiple(array $items) { foreach ($items as $item) { if ($item instanceof RequestException) { $this->addException($item); } else { $this->addResponse($item); } } } public function clearQueue() { $this->queue = []; } } 