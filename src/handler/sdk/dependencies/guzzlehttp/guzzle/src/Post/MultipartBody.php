<?php
namespace GuzzleHttp\Post; use GuzzleHttp\Stream\AppendStream; use GuzzleHttp\Stream\Stream; use GuzzleHttp\Stream\StreamDecoratorTrait; use GuzzleHttp\Stream\StreamInterface; class MultipartBody implements StreamInterface { use StreamDecoratorTrait; private $boundary; public function __construct( array $fields = [], array $files = [], $boundary = null ) { $this->boundary = $boundary ?: uniqid(); $this->stream = $this->createStream($fields, $files); } public function getBoundary() { return $this->boundary; } public function isWritable() { return false; } private function getFieldString($name, $value) { return sprintf( "--%s\r\nContent-Disposition: form-data; name=\"%s\"\r\n\r\n%s\r\n", $this->boundary, $name, $value ); } private function getFileHeaders(PostFileInterface $file) { $headers = ''; foreach ($file->getHeaders() as $key => $value) { $headers .= "{$key}: {$value}\r\n"; } return "--{$this->boundary}\r\n" . trim($headers) . "\r\n\r\n"; } protected function createStream(array $fields, array $files) { $stream = new AppendStream(); foreach ($fields as $name => $fieldValues) { foreach ((array) $fieldValues as $value) { $stream->addStream( Stream::factory($this->getFieldString($name, $value)) ); } } foreach ($files as $file) { if (!$file instanceof PostFileInterface) { throw new \InvalidArgumentException('All POST fields must ' . 'implement PostFieldInterface'); } $stream->addStream( Stream::factory($this->getFileHeaders($file)) ); $stream->addStream($file->getContent()); $stream->addStream(Stream::factory("\r\n")); } $stream->addStream(Stream::factory("--{$this->boundary}--\r\n")); return $stream; } } 