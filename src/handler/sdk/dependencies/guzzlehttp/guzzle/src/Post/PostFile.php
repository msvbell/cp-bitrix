<?php
namespace GuzzleHttp\Post; use GuzzleHttp\Mimetypes; use GuzzleHttp\Stream\StreamInterface; use GuzzleHttp\Stream\Stream; class PostFile implements PostFileInterface { private $name; private $filename; private $content; private $headers = []; public function __construct( $name, $content, $filename = null, array $headers = [] ) { $this->headers = $headers; $this->name = $name; $this->prepareContent($content); $this->prepareFilename($filename); $this->prepareDefaultHeaders(); } public function getName() { return $this->name; } public function getFilename() { return $this->filename; } public function getContent() { return $this->content; } public function getHeaders() { return $this->headers; } private function prepareContent($content) { $this->content = $content; if (!($this->content instanceof StreamInterface)) { $this->content = Stream::factory($this->content); } elseif ($this->content instanceof MultipartBody) { if (!$this->hasHeader('Content-Disposition')) { $disposition = 'form-data; name="' . $this->name .'"'; $this->headers['Content-Disposition'] = $disposition; } if (!$this->hasHeader('Content-Type')) { $this->headers['Content-Type'] = sprintf( "multipart/form-data; boundary=%s", $this->content->getBoundary() ); } } } private function prepareFilename($filename) { $this->filename = $filename; if (!$this->filename) { $this->filename = $this->content->getMetadata('uri'); } if (!$this->filename || substr($this->filename, 0, 6) === 'php://') { $this->filename = $this->name; } } private function prepareDefaultHeaders() { if (!$this->hasHeader('Content-Disposition')) { $this->headers['Content-Disposition'] = sprintf( 'form-data; name="%s"; filename="%s"', $this->name, basename($this->filename) ); } if (!$this->hasHeader('Content-Type')) { $this->headers['Content-Type'] = Mimetypes::getInstance() ->fromFilename($this->filename) ?: 'text/plain'; } } private function hasHeader($name) { return isset(array_change_key_case($this->headers)[strtolower($name)]); } } 