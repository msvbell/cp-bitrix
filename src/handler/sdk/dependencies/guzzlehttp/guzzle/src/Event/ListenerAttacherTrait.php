<?php
namespace GuzzleHttp\Event; trait ListenerAttacherTrait { private function attachListeners(HasEmitterInterface $object, array $listeners) { $emitter = $object->getEmitter(); foreach ($listeners as $el) { if ($el['once']) { $emitter->once($el['name'], $el['fn'], $el['priority']); } else { $emitter->on($el['name'], $el['fn'], $el['priority']); } } } private function prepareListeners(array $source, array $events) { $listeners = []; foreach ($events as $name) { if (isset($source[$name])) { $this->buildListener($name, $source[$name], $listeners); } } return $listeners; } private function buildListener($name, $data, &$listeners) { static $defaults = ['priority' => 0, 'once' => false]; if (is_callable($data)) { $data = ['fn' => $data]; } if (isset($data['fn'])) { $data['name'] = $name; $listeners[] = $data + $defaults; } elseif (is_array($data)) { foreach ($data as $listenerData) { $this->buildListener($name, $listenerData, $listeners); } } else { throw new \InvalidArgumentException('Each event listener must be a ' . 'callable or an associative array containing a "fn" key.'); } } } 