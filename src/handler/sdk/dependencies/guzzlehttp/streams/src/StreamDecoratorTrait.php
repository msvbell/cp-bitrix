<?php
namespace GuzzleHttp\Stream; use GuzzleHttp\Stream\Exception\CannotAttachException; trait StreamDecoratorTrait { public function __construct(StreamInterface $stream) { $this->stream = $stream; } public function __get($name) { if ($name == 'stream') { $this->stream = $this->createStream(); return $this->stream; } throw new \UnexpectedValueException("$name not found on class"); } public function __toString() { try { $this->seek(0); return $this->getContents(); } catch (\Exception $e) { trigger_error('StreamDecorator::__toString exception: ' . (string) $e, E_USER_ERROR); return ''; } } public function getContents() { return Utils::copyToString($this); } public function __call($method, array $args) { $result = call_user_func_array(array($this->stream, $method), $args); return $result === $this->stream ? $this : $result; } public function close() { $this->stream->close(); } public function getMetadata($key = null) { return $this->stream->getMetadata($key); } public function detach() { return $this->stream->detach(); } public function attach($stream) { throw new CannotAttachException(); } public function getSize() { return $this->stream->getSize(); } public function eof() { return $this->stream->eof(); } public function tell() { return $this->stream->tell(); } public function isReadable() { return $this->stream->isReadable(); } public function isWritable() { return $this->stream->isWritable(); } public function isSeekable() { return $this->stream->isSeekable(); } public function seek($offset, $whence = SEEK_SET) { return $this->stream->seek($offset, $whence); } public function read($length) { return $this->stream->read($length); } public function write($string) { return $this->stream->write($string); } protected function createStream() { throw new \BadMethodCallException('createStream() not implemented in ' . get_class($this)); } } 